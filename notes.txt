three.min.js:92 THREE.WebGLProgram: gl.getProgramInfoLog() C:\fakepath(87,1-6): warning X4000: use of potentially uninitialized variable (dyn_index_vec4_float4_int)


Moving from r84 to r120 of Three.js is quite a jump - that's good that you've only encountered minor issues so far. The main attribute change you probably hit was the switch from `.attributes` to `.getAttribute()`, which was one of the bigger breaking changes in that period.

Since you're doing such a significant version upgrade, you might want to watch out for a few other potential issues that could come up, particularly with shaders:

1. Shader precision defaults changed
2. Some uniform naming conventions were updated
3. The WebGLRenderer parameters changed somewhat
4. Material property naming evolved in some cases



Would you like me to keep an eye out for any other version-specific changes as we discuss your Three.js implementation? I can flag anything that might need attention during the upgrade process.


That's a smart, methodical approach to upgrading. Going up in smaller increments makes it much easier to isolate and fix breaking changes when they occur.

Between r120 and r150, some notable changes to watch for include:

1. Around r125-r129: Changes to material parameter handling
2. r137: WebGLRenderer got some significant updates
3. r139: More strict WebGL context handling
4. r148: Changes to how buffers are managed

By stopping at r120 for now, you're in a relatively stable zone. The bigger breaking changes tend to start appearing in the r130+ range, particularly around shader and material handling.

Your staged approach (5 versions at a time) will be especially helpful when you hit the r130-150 range as there were more architectural changes in those releases. Would you like me to point out specific changes for the next 5 versions you're planning to upgrade to?

Looking at the changes from r120 to r125:

Key changes to watch for:
1. r121: WebGL state handling was updated - might affect custom shaders
2. r122: Texture handling improvements - generally backwards compatible but worth testing thoroughly with your texture loader
3. r123: Minor changes to geometry attribute handling
4. r124: Updates to shadow mapping - if you're using shadows, test carefully
5. r125: Material system updates - particularly around shader uniforms

The most likely impact points for your code would be:
- Any custom WebGL state management
- Shader uniform handling
- Shadow implementations if you're using them

Since you've built that robust texture loading system, you should be safe on that front through these versions. However, if you're using any direct WebGL calls or state management, those might need attention around r121.

Would you like me to get specific about the next batch (r126-130) once you've tackled these versions?